{
    "DOMAIN": "dev.chrislawrence.ca",
    "TUNNEL_ID": "3a9f1023-0d6c-49ff-900d-32403e4309f8",
    "NETWORK": "homelab-web",
    "CADDY_CONTAINER": "caddy",
    "CLOUDFLARED_SERVICE": "cloudflared",
    
    "SERVICES": {
      "main": {
        "PATH": "/",
        "SERVICE_NAME": "Main Site",
        "CONTAINER_NAME": "caddy",
        "INTERNAL_PORT": 80,
        "EXTERNAL_PORT": 80,
        "EXPECTED_CONTENT": "chrislawrence",
        "CRITICAL": true,
        "TIMEOUT": 5,
        "RETRIES": 3,
        "REPAIR_COMMANDS": [
          "docker restart caddy",
          "sudo systemctl restart cloudflared"
        ],
        "CONTENT_CHECKS": [
          "chrislawrence",
          "Chris Lawrence"
        ]
      },
      
      "portfolio": {
        "PATH": "/portfolio/",
        "SERVICE_NAME": "Portfolio",
        "CONTAINER_NAME": "chrislawrence-portfolio-portfolio",
        "INTERNAL_PORT": 5000,
        "EXTERNAL_PORT": 8110,
        "EXPECTED_CONTENT": "Chris Lawrence",
        "CRITICAL": true,
        "TIMEOUT": 5,
        "RETRIES": 3,
        "REPAIR_COMMANDS": [
          "docker restart chrislawrence-portfolio-portfolio",
          "docker restart caddy",
          "sudo systemctl restart cloudflared"
        ],
        "CONTENT_CHECKS": [
          "Chris Lawrence",
          "Portfolio",
          "Software Developer"
        ]
      },
      
      "capitolscope": {
        "PATH": "/capitolscope/",
        "SERVICE_NAME": "CapitolScope Frontend",
        "CONTAINER_NAME": "capitolscope-frontend",
        "INTERNAL_PORT": 3000,
        "EXTERNAL_PORT": 8121,
        "EXPECTED_CONTENT": "CapitolScope",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart capitolscope-frontend",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "CapitolScope",
          "Political Data"
        ]
      },
      
      "capitolscope-api": {
        "PATH": "/capitolscope-api/",
        "SERVICE_NAME": "CapitolScope API",
        "CONTAINER_NAME": "capitolscope-api",
        "INTERNAL_PORT": 8080,
        "EXTERNAL_PORT": 8120,
        "EXPECTED_CONTENT": "API",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart capitolscope-api",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "API",
          "CapitolScope"
        ]
      },
      
      "schedshare": {
        "PATH": "/schedshare/",
        "SERVICE_NAME": "SchedShare",
        "CONTAINER_NAME": "schedshare",
        "INTERNAL_PORT": 3000,
        "EXTERNAL_PORT": 8130,
        "EXPECTED_CONTENT": "SchedShare",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart schedshare",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "SchedShare",
          "Schedule"
        ]
      },
      
      "magicpages": {
        "PATH": "/magicpages/",
        "SERVICE_NAME": "MagicPages Frontend",
        "CONTAINER_NAME": "magicpages-frontend",
        "INTERNAL_PORT": 3000,
        "EXTERNAL_PORT": 8101,
        "EXPECTED_CONTENT": "MagicPages",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart magicpages-frontend",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "MagicPages",
          "Content Management"
        ]
      },
      
      "magicpages-api": {
        "PATH": "/magicpages-api/",
        "SERVICE_NAME": "MagicPages API",
        "CONTAINER_NAME": "magicpages-api",
        "INTERNAL_PORT": 8080,
        "EXTERNAL_PORT": 8100,
        "EXPECTED_CONTENT": "API",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart magicpages-api",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "API",
          "MagicPages"
        ]
      },
      
      "n8n": {
        "PATH": "/n8n/",
        "SERVICE_NAME": "n8n",
        "CONTAINER_NAME": "n8n",
        "INTERNAL_PORT": 5678,
        "EXTERNAL_PORT": 5678,
        "EXPECTED_CONTENT": "n8n",
        "CRITICAL": true,
        "TIMEOUT": 15,
        "RETRIES": 3,
        "REPAIR_COMMANDS": [
          "docker restart n8n",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "n8n",
          "Workflow"
        ]
      },
      
      "nodered": {
        "PATH": "/nodered/",
        "SERVICE_NAME": "Node-RED",
        "CONTAINER_NAME": "nodered",
        "INTERNAL_PORT": 1880,
        "EXTERNAL_PORT": 1880,
        "EXPECTED_CONTENT": "Node-RED",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart nodered",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Node-RED",
          "Flow"
        ]
      },
      
      "notes": {
        "PATH": "/notes/",
        "SERVICE_NAME": "Obsidian",
        "CONTAINER_NAME": "obsidian",
        "INTERNAL_PORT": 8080,
        "EXTERNAL_PORT": 8060,
        "EXPECTED_CONTENT": "Obsidian",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart obsidian",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Obsidian",
          "Notes"
        ]
      },
      
      "minecraft-map": {
        "PATH": "/minecraft-map/",
        "SERVICE_NAME": "Minecraft Dynmap",
        "CONTAINER_NAME": "minecraft-dynmap",
        "INTERNAL_PORT": 8123,
        "EXTERNAL_PORT": 8123,
        "EXPECTED_CONTENT": "Dynmap",
        "CRITICAL": false,
        "TIMEOUT": 15,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart minecraft-dynmap",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Dynmap",
          "Minecraft"
        ]
      },
      
      "mqtt": {
        "PATH": "/mqtt/",
        "SERVICE_NAME": "MQTT Explorer",
        "CONTAINER_NAME": "mqtt-explorer",
        "INTERNAL_PORT": 4000,
        "EXTERNAL_PORT": 4000,
        "EXPECTED_CONTENT": "MQTT",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart mqtt-explorer",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "MQTT",
          "Explorer"
        ]
      },
      
      "meshtastic": {
        "PATH": "/meshtastic/",
        "SERVICE_NAME": "Meshtastic Web",
        "CONTAINER_NAME": "meshtastic-web",
        "INTERNAL_PORT": 8080,
        "EXTERNAL_PORT": 8080,
        "EXPECTED_CONTENT": "Meshtastic",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart meshtastic-web",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Meshtastic",
          "Mesh"
        ]
      },
      
      "grafana-iot": {
        "PATH": "/grafana-iot/",
        "SERVICE_NAME": "Grafana IoT",
        "CONTAINER_NAME": "grafana-iot",
        "INTERNAL_PORT": 3000,
        "EXTERNAL_PORT": 3002,
        "EXPECTED_CONTENT": "Grafana",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart grafana-iot",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Grafana",
          "IoT"
        ]
      },
      
      "influxdb": {
        "PATH": "/influxdb/",
        "SERVICE_NAME": "InfluxDB",
        "CONTAINER_NAME": "influxdb",
        "INTERNAL_PORT": 8086,
        "EXTERNAL_PORT": 8086,
        "EXPECTED_CONTENT": "InfluxDB",
        "CRITICAL": false,
        "TIMEOUT": 10,
        "RETRIES": 2,
        "REPAIR_COMMANDS": [
          "docker restart influxdb",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "InfluxDB",
          "Database"
        ]
      },
      
      "dashboard": {
        "PATH": "/dashboard/",
        "SERVICE_NAME": "Grafana Dashboard",
        "CONTAINER_NAME": "grafana",
        "INTERNAL_PORT": 3000,
        "EXTERNAL_PORT": 3000,
        "EXPECTED_CONTENT": "Grafana",
        "CRITICAL": true,
        "TIMEOUT": 10,
        "RETRIES": 3,
        "REPAIR_COMMANDS": [
          "docker restart grafana",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Grafana",
          "Dashboard"
        ]
      },
      
      "uptime": {
        "PATH": "/uptime/",
        "SERVICE_NAME": "Uptime Kuma",
        "CONTAINER_NAME": "uptime-kuma",
        "INTERNAL_PORT": 3001,
        "EXTERNAL_PORT": 3001,
        "EXPECTED_CONTENT": "Uptime",
        "CRITICAL": true,
        "TIMEOUT": 10,
        "RETRIES": 3,
        "REPAIR_COMMANDS": [
          "docker restart uptime-kuma",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Uptime",
          "Kuma"
        ]
      },
      
      "docker": {
        "PATH": "/docker/",
        "SERVICE_NAME": "Portainer",
        "CONTAINER_NAME": "portainer",
        "INTERNAL_PORT": 9000,
        "EXTERNAL_PORT": 9000,
        "EXPECTED_CONTENT": "Portainer",
        "CRITICAL": true,
        "TIMEOUT": 10,
        "RETRIES": 3,
        "REPAIR_COMMANDS": [
          "docker restart portainer",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Portainer",
          "Docker"
        ]
      },
      
      "metrics": {
        "PATH": "/metrics/",
        "SERVICE_NAME": "Prometheus",
        "CONTAINER_NAME": "prometheus",
        "INTERNAL_PORT": 9090,
        "EXTERNAL_PORT": 9090,
        "EXPECTED_CONTENT": "Prometheus",
        "CRITICAL": true,
        "TIMEOUT": 10,
        "RETRIES": 3,
        "REPAIR_COMMANDS": [
          "docker restart prometheus",
          "docker restart caddy"
        ],
        "CONTENT_CHECKS": [
          "Prometheus",
          "Metrics"
        ]
      }
    },
    
    "INFRASTRUCTURE": {
      "caddy": {
        "CONTAINER_NAME": "caddy",
        "INTERNAL_PORT": 80,
        "EXTERNAL_PORT": 80,
        "CRITICAL": true
      },
      "cloudflared": {
        "SERVICE_NAME": "cloudflared",
        "CRITICAL": true
      },
      "docker": {
        "SERVICE_NAME": "docker",
        "CRITICAL": true
      }
    },
    
    "TELEGRAM": {
      "CHAT_ID": "your_chat_id",
      "BOT_TOKEN": "your_bot_token"
    },
    
    "MANAGEMENT_SCRIPTS": {
      "MANAGE_SERVICES": "/home/chris/manage-services.sh",
      "START_HOMELAB": "/home/chris/start-homelab.sh"
    }
  }