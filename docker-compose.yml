version: '3.8'

# Hephaestus Homelab - Main Stack
# Dell OptiPlex 7040 Ubuntu Server 24.04
# Docker Engine 27.x

networks:
  web:
    name: web
    driver: bridge

volumes:
  portainer_data:
  uptime-kuma_data:
  grafana_data:
  prometheus_data:

services:
  # ============================================================================
  # INFRASTRUCTURE SERVICES
  # ============================================================================
  
  # Caddy - Reverse proxy with automatic HTTPS
  caddy:
    image: caddy:2-alpine
    container_name: caddy
    restart: unless-stopped
    networks:
      - web
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"  # HTTP/3
    volumes:
      - ./proxy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - DOMAIN=${DOMAIN}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:2019/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cloudflared - Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    networks:
      - web
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - caddy

  # Portainer - Docker management UI
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    networks:
      - web
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    security_opt:
      - no-new-privileges:true

  # Uptime Kuma - Uptime monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    restart: unless-stopped
    networks:
      - web
    ports:
      - "3001:3001"
    volumes:
      - uptime-kuma_data:/app/data
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    security_opt:
      - no-new-privileges:true

  # Watchtower - Automatic container updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *  # 4 AM daily
      - TZ=${TZ:-America/New_York}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # ============================================================================
  # MONITORING SERVICES
  # ============================================================================

  # Grafana - Metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - web
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-stack/dashboards:/etc/grafana/provisioning/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=https://grafana.${DOMAIN}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    user: "472"  # Grafana UID
    depends_on:
      - prometheus

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - web
    ports:
      - "9090:9090"
    volumes:
      - ./grafana-stack/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    user: "nobody"

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    networks:
      - web
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # Glances - System monitoring
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    restart: unless-stopped
    networks:
      - web
    ports:
      - "61208:61208"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - GLANCES_OPT=-w
    pid: host
    labels:
      - "com.centurylinklabs.watchtower.enable=true"

  # ============================================================================
  # APPLICATION SERVICES
  # ============================================================================

  # Magic Pages API - Django + Gunicorn
  magic-pages-api:
    image: magic-pages-api:latest
    container_name: magic-pages-api
    restart: unless-stopped
    networks:
      - web
    ports:
      - "8001:8000"
    volumes:
      - ${MAGIC_PAGES_API_PATH}:/app
      - magic_pages_static:/app/static
      - magic_pages_media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - SECRET_KEY=${MAGIC_PAGES_SECRET_KEY}
      - DATABASE_URL=${MAGIC_PAGES_DB_URL}
      - ALLOWED_HOSTS=${MAGIC_PAGES_ALLOWED_HOSTS}
      - DEBUG=false
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    # Build from app directory
    build:
      context: ${MAGIC_PAGES_API_PATH}
      dockerfile: Dockerfile

  # CapitolScope - FastAPI + Postgres
  capitolscope:
    image: capitolscope:latest
    container_name: capitolscope
    restart: unless-stopped
    networks:
      - web
    ports:
      - "8002:8000"
    volumes:
      - ${CAPITOLSCOPE_PATH}:/app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@capitolscope-db:5432/${POSTGRES_DB}
      - API_KEY=${CAPITOLSCOPE_API_KEY}
      - ENVIRONMENT=production
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    depends_on:
      - capitolscope-db
    build:
      context: ${CAPITOLSCOPE_PATH}
      dockerfile: Dockerfile

  # CapitolScope Database - Postgres
  capitolscope-db:
    image: postgres:16-alpine
    container_name: capitolscope-db
    restart: unless-stopped
    networks:
      - web
    volumes:
      - capitolscope_db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    shm_size: 256mb

  # SchedShare - Flask
  schedshare:
    image: schedshare:latest
    container_name: schedshare
    restart: unless-stopped
    networks:
      - web
    ports:
      - "8003:5000"
    volumes:
      - ${SCHEDSHARE_PATH}:/app
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${SCHEDSHARE_SECRET_KEY}
      - DATABASE_URL=${SCHEDSHARE_DB_URL}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    build:
      context: ${SCHEDSHARE_PATH}
      dockerfile: Dockerfile

  # Portfolio Site - Flask
  portfolio:
    image: portfolio:latest
    container_name: portfolio
    restart: unless-stopped
    networks:
      - web
    ports:
      - "8004:5000"
    volumes:
      - ${PORTFOLIO_PATH}:/app
    environment:
      - FLASK_ENV=production
      - SECRET_KEY=${PORTFOLIO_SECRET_KEY}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    build:
      context: ${PORTFOLIO_PATH}
      dockerfile: Dockerfile

  # Magic Pages Frontend - Static site (Nginx)
  magic-pages-frontend:
    image: nginx:alpine
    container_name: magic-pages-frontend
    restart: unless-stopped
    networks:
      - web
    ports:
      - "8005:80"
    volumes:
      - ${MAGIC_PAGES_FRONTEND_PATH}:/usr/share/nginx/html:ro
      - ./proxy/nginx-static.conf:/etc/nginx/conf.d/default.conf:ro
    labels:
      - "com.centurylinklabs.watchtower.enable=false"

volumes:
  caddy_data:
  caddy_config:
  magic_pages_static:
  magic_pages_media:
  capitolscope_db_data:

